import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time
import os
from lxml import etree
import threading

chapters = {}  # 存储章节标题和内容的字典

def update_display():
    listbox.delete(0, tk.END)
    for title in chapters:
        listbox.insert(tk.END, title)

def show_chapter_content(event):
    global chapter_text
    selected_title = listbox.get(listbox.curselection())
    chapter_text.delete("1.0", tk.END)
    chapter_text.insert(tk.END, chapters[selected_title])

def crawl_novel(keyword):
    # 创建浏览器Options对象，并设置无头模式
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--window-size=1920,1080")
    options.add_argument("user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'")

    # 创建浏览器对象
    driver = webdriver.Chrome(options=options)

    try:
        # 打开笔趣阁小说网首页
        driver.get("https://www.bige3.cc/")

        # 输入搜索关键词并点击搜索按钮
        search_input = driver.find_element_by_xpath("/html/body/div[4]/div[1]/div[2]/form/input[1]")
        search_input.send_keys(keyword)
        # 按回车键进行搜索
        search_input.send_keys(Keys.ENTER)
        time.sleep(2)

        # 依次点击小说标题打开小说
        elements = driver.find_elements_by_xpath("/html/body/div[5]/div/div/div/div/div[2]/h4/a")
        for i in range(len(elements)):
            # 在这里执行你想要的操作，例如获取元素文本、点击元素等
            elements = driver.find_elements_by_xpath("/html/body/div[5]/div/div/div/div/div[2]/h4/a")
            element = elements[i]
            element.click()  # 点击元素

            # 切换到新打开的窗口
            driver.switch_to.window(driver.window_handles[-1])
            time.sleep(2)
            # 点击第一章标题
            chapter = driver.find_elements_by_xpath("//*[@class='listmain']/dl/dd/a")[0]
            chapter.click()
            time.sleep(1)
            while True:
                # 获取章节标题
                chapter_title = driver.find_element_by_xpath("//*[@id='read']/div[5]/div[3]/h1").text

                # 获取章节内容
                chapter_content = driver.find_element_by_xpath("//*[@id='chaptercontent']")
                html = chapter_content.get_attribute("innerHTML")

                # 使用lxml解析章节内容
                tree = etree.HTML(html)
                content = tree.xpath("string(.)")  # 获取章节内容的文本形式

                # 删除特定字段
                chapter_title = chapter_title.replace("、","")
                content = content.replace("无弹窗，更新快，免费阅读！", "")
                content = content.replace("请收藏本站：https://www.bige3.cc。笔趣阁手机版：https://m.bige3.cc", "")
                content = content.replace("『点此报错』『加入书签』", "")

                if save_checkbox_var.get():
                    # 创建保存目录
                    book_dir = os.path.join(os.getcwd(), keyword)
                    if not os.path.exists(book_dir):
                        os.makedirs(book_dir)

                    # 保存章节内容到文件
                    chapter_path = os.path.join(book_dir, f"{chapter_title}.txt")
                    with open(chapter_path, "w", encoding="utf-8") as f:
                        f.write(content)

                # 将章节标题和内容添加到字典中
                chapters[chapter_title] = content

                update_display()  # 更新展示

                try:
                    # 点击下一章按钮
                    next_button = driver.find_element_by_xpath('//div[@class="Readpage pagedown"]/a[@id="pb_next"]')
                    next_button.click()
                    time.sleep(1)  # 等待页面加载
                except:
                    break  # 如果没有下一章按钮，则跳出循环

            # 返回至小说列表页面
            driver.back()
            time.sleep(1)

    except Exception as e:
        messagebox.showinfo("完成", "运行完毕")
    finally:
        # 关闭浏览器
        driver.quit()

        if save_checkbox_var.get():
            messagebox.showinfo("提示", "小说下载完成")

def search_novel():
    keyword = entry.get()

    if not keyword:
        messagebox.showwarning("警告", "请输入小说名称")
        return

    threading.Thread(target=crawl_novel, args=(keyword,)).start()

root = tk.Tk()
root.title("小说下载器")
root.geometry("600x400")

# 使用ttk样式设置控件外观
style = ttk.Style()

# 设置窗口外观
root.configure(bg='white')
style.configure('TFrame', background='white')

# 设置标签外观
style.configure('TLabel', background='white', font=('Arial', 13))

# 设置按钮外观
style.configure('TButton', background='lightblue', font=('Arial', 13), foreground='green')

# 设置复选框外观
style.configure('TCheckbutton', background='white', font=('Arial', 13))

# 设置列表框外观
style.configure('TListbox', background='white', font=('Arial', 12))

# 设置文本框外观
style.configure('TText', background='white', font=('Arial', 13))

label = ttk.Label(root, text="请输入小说名称:")
label.pack()

entry = ttk.Entry(root)
entry.config(font=13)
entry.pack()

save_checkbox_var = tk.BooleanVar()
save_checkbox = ttk.Checkbutton(root, text="是否下载小说内容到当前目录下", variable=save_checkbox_var)
save_checkbox.pack()

button = ttk.Button(root, text="获取", command=search_novel)
button.pack()

listbox_frame = ttk.Frame(root)
listbox_frame.pack(side=tk.LEFT, fill=tk.Y)

scrollbar = ttk.Scrollbar(listbox_frame)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

listbox = tk.Listbox(listbox_frame, selectmode=tk.SINGLE, yscrollcommand=scrollbar.set)
listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

scrollbar.config(command=listbox.yview)

listbox.bind("<<ListboxSelect>>", show_chapter_content)

chapter_text_frame = ttk.Frame(root)
chapter_text_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

chapter_text_scrollbar = ttk.Scrollbar(chapter_text_frame)
chapter_text_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

chapter_text = tk.Text(chapter_text_frame, yscrollcommand=chapter_text_scrollbar.set)
chapter_text.config(spacing1=10, spacing2=20)
chapter_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

chapter_text_scrollbar.config(command=chapter_text.yview)

root.mainloop()
